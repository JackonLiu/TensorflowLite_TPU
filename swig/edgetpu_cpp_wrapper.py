# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_edgetpu_cpp_wrapper', [dirname(__file__)])
        except ImportError:
            import _edgetpu_cpp_wrapper
            return _edgetpu_cpp_wrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_edgetpu_cpp_wrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _edgetpu_cpp_wrapper = swig_import_helper()
    del swig_import_helper
else:
    import _edgetpu_cpp_wrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class BasicEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicEngine, name)
    __repr__ = _swig_repr

    def __init__(self, model_path):
        this = _edgetpu_cpp_wrapper.new_BasicEngine(model_path)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _edgetpu_cpp_wrapper.delete_BasicEngine
    __del__ = lambda self: None

    def RunInference(self, input):
        return _edgetpu_cpp_wrapper.BasicEngine_RunInference(self, input)

    def get_input_tensor_shape(self):
        return _edgetpu_cpp_wrapper.BasicEngine_get_input_tensor_shape(self)

    def get_all_output_tensors_sizes(self):
        return _edgetpu_cpp_wrapper.BasicEngine_get_all_output_tensors_sizes(self)

    def get_num_of_output_tensors(self):
        return _edgetpu_cpp_wrapper.BasicEngine_get_num_of_output_tensors(self)

    def get_output_tensor_size(self, tensor_index):
        return _edgetpu_cpp_wrapper.BasicEngine_get_output_tensor_size(self, tensor_index)

    def required_input_array_size(self):
        return _edgetpu_cpp_wrapper.BasicEngine_required_input_array_size(self)

    def total_output_array_size(self):
        return _edgetpu_cpp_wrapper.BasicEngine_total_output_array_size(self)

    def model_path(self):
        return _edgetpu_cpp_wrapper.BasicEngine_model_path(self)

    def get_raw_output(self):
        return _edgetpu_cpp_wrapper.BasicEngine_get_raw_output(self)

    def get_inference_time(self):
        return _edgetpu_cpp_wrapper.BasicEngine_get_inference_time(self)
    __swig_getmethods__["get_driver_version"] = lambda x: _edgetpu_cpp_wrapper.BasicEngine_get_driver_version
    if _newclass:
        get_driver_version = staticmethod(_edgetpu_cpp_wrapper.BasicEngine_get_driver_version)
BasicEngine_swigregister = _edgetpu_cpp_wrapper.BasicEngine_swigregister
BasicEngine_swigregister(BasicEngine)

def BasicEngine_get_driver_version():
    return _edgetpu_cpp_wrapper.BasicEngine_get_driver_version()
BasicEngine_get_driver_version = _edgetpu_cpp_wrapper.BasicEngine_get_driver_version

class ImprintingEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImprintingEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImprintingEngine, name)
    __repr__ = _swig_repr

    def __init__(self, model_path):
        this = _edgetpu_cpp_wrapper.new_ImprintingEngine(model_path)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def SaveModel(self, output_path):
        return _edgetpu_cpp_wrapper.ImprintingEngine_SaveModel(self, output_path)

    def Train(self, input):
        return _edgetpu_cpp_wrapper.ImprintingEngine_Train(self, input)
    __swig_destroy__ = _edgetpu_cpp_wrapper.delete_ImprintingEngine
    __del__ = lambda self: None
ImprintingEngine_swigregister = _edgetpu_cpp_wrapper.ImprintingEngine_swigregister
ImprintingEngine_swigregister(ImprintingEngine)

# This file is compatible with both classic and new-style classes.


